import Color from 'color';
import { produce } from 'immer';
import { Mixin } from 'ts-mixer';

import { AggregateRoot, Recipe } from '../../_core';
import {
  Actor,
  ActorDescription,
  ActorName,
  ActorProps,
  ITimestamps,
  TimestampMixin,
  Timestamps,
  TwitterUsername,
  YoutubeChannelId,
} from '../_shared';
import { OrganizationId } from '../organization';
import { PerformerId } from './performer-id';

export interface PerformerProps extends ActorProps {
  readonly id: PerformerId;
  readonly timestamps: Timestamps;
  readonly organizationId: OrganizationId | null;
}

type AutoGenerated = 'id' | 'timestamps';

const mixins = Mixin(
  AggregateRoot<PerformerId, PerformerProps>,
  Actor,
  TimestampMixin,
);

export class Performer extends mixins implements ITimestamps {
  public get organizationId(): OrganizationId | null {
    return this._props.organizationId;
  }

  joinOrganization(organizationId: OrganizationId) {
    const props = produce(this._props, (draft) => {
      draft.organizationId = organizationId;
      draft.timestamps = draft.timestamps.update();
    });
    return new Performer(props);
  }

  setName(name: ActorName) {
    const props = produce(this._props, (draft) => {
      draft.name = name;
      draft.timestamps = draft.timestamps.update();
    });
    return new Performer(props);
  }

  setDescription(name: ActorDescription | null) {
    const props = produce(this._props, (draft) => {
      draft.description = name;
      draft.timestamps = draft.timestamps.update();
    });
    return new Performer(props);
  }

  setYoutubeChannelId(id: YoutubeChannelId | null) {
    const props = produce(this._props, (draft) => {
      draft.youtubeChannelId = id;
      draft.timestamps = draft.timestamps.update();
    });
    return new Performer(props);
  }

  setTwitterUsername(username: TwitterUsername | null) {
    const props = produce(this._props, (draft) => {
      draft.twitterUsername = username;
      draft.timestamps = draft.timestamps.update();
    });
    return new Performer(props);
  }

  setColor(color: Color) {
    const props = produce(this._props, (draft) => {
      draft.color = color;
      draft.timestamps = draft.timestamps.update();
    });
    return new Performer(props);
  }

  setUrl(url: URL | null) {
    const props = produce(this._props, (draft) => {
      draft.url = url;
      draft.timestamps = draft.timestamps.update();
    });
    return new Performer(props);
  }

  public static create(props: Omit<Recipe<PerformerProps>, AutoGenerated>) {
    return Performer.rehydrate({
      // ...Actor.create(props),
      ...props,
      id: new PerformerId(),
      timestamps: new Timestamps(),
    });
  }

  public static rehydrate(props: Recipe<PerformerProps>) {
    return new Performer({
      ...Actor.rehydrate(props),
      id: new PerformerId(props.id),
      timestamps: props.timestamps,
      organizationId:
        props.organizationId !== null
          ? new OrganizationId(props.organizationId)
          : null,
    });
  }
}
